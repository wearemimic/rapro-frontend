"""
Django settings for retirementadvisorpro project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from django.conf import settings
from django.conf.urls.static import static
from datetime import timedelta

# Load environment variables from .env file
from dotenv import load_dotenv
load_dotenv(os.path.join(Path(__file__).resolve().parent.parent, '.env'))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k=cvx&v-c(&wn9by6qqgn%!fxrrzix2)4exw_l328a8&9#ppgp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

AUTH_USER_MODEL = 'core.CustomUser'


ALLOWED_HOSTS = ['localhost', '127.0.0.1', '192.168.1.83', '*']


# Application definition

INSTALLED_APPS = [
    'core',
    'report_center',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'social_django',  # Add social_django for Auth0
    # Celery related apps
    'django_celery_beat',
    'django_celery_results',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.performance_middleware.PerformanceMonitoringMiddleware',
    'core.performance_middleware.SystemHealthMonitoringMiddleware',
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
]

# For CORS headers (if using the django-cors-headers package)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  # Vite default development server
    "http://localhost:8080",
    "http://localhost:3000",  # <-- added for frontend dev server
    "http://192.168.1.83:5173",  # Local IP with Vite
    "http://192.168.1.83:8080",
    "http://192.168.1.83:3000",
]

CORS_ALLOW_CREDENTIALS = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'login': '10/min',  # specific to login - increased from 5/min
        'user': '1000/min',     # authenticated users: increased from 100/min to 1000/min for scenario navigation
        'anon': '20/min',       # anonymous users: increased from 5/min to 20/min
    }
}

# Auth0 settings
AUTH0_DOMAIN = os.environ.get('AUTH0_DOMAIN', 'your-auth0-domain.auth0.com')
AUTH0_CLIENT_ID = os.environ.get('AUTH0_CLIENT_ID', 'your-auth0-client-id')
AUTH0_CLIENT_SECRET = os.environ.get('AUTH0_CLIENT_SECRET', 'your-auth0-client-secret')
AUTH0_AUDIENCE = os.environ.get('AUTH0_AUDIENCE', 'https://api.retirementadvisorpro.com')
AUTH0_ALGORITHM = os.environ.get('AUTH0_ALGORITHM', 'RS256')

# Social Auth settings
SOCIAL_AUTH_TRAILING_SLASH = False
SOCIAL_AUTH_AUTH0_DOMAIN = AUTH0_DOMAIN
SOCIAL_AUTH_AUTH0_KEY = AUTH0_CLIENT_ID
SOCIAL_AUTH_AUTH0_SECRET = AUTH0_CLIENT_SECRET
SOCIAL_AUTH_AUTH0_SCOPE = [
    'openid',
    'profile',
    'email'
]

AUTHENTICATION_BACKENDS = [
    'core.authentication.ClientPortalBackend',  # Client portal authentication
    'social_core.backends.auth0.Auth0OAuth2',   # Auth0 authentication
    'django.contrib.auth.backends.ModelBackend',  # Standard Django authentication
]

ROOT_URLCONF = 'retirementadvisorpro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'retirementadvisorpro.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'retirementadvisorpro',
        'USER': 'postgres',
        'PASSWORD': 'password',
        'HOST': 'db',  # Use 'db' if you're using Docker with a service named `db`
        'PORT': '5432',
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ("Bearer",),
}
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = 'static/'
STATIC_URL = '/static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Report Center specific file storage settings
REPORT_CENTER_STORAGE = {
    'TEMPLATE_PREVIEWS': os.path.join(MEDIA_ROOT, 'report_center/template_previews/'),
    'GENERATED_REPORTS': os.path.join(MEDIA_ROOT, 'report_center/generated_reports/'),
    'PDF_REPORTS': os.path.join(MEDIA_ROOT, 'report_center/generated_reports/pdf/'),
    'PPTX_REPORTS': os.path.join(MEDIA_ROOT, 'report_center/generated_reports/pptx/'),
    'TEMPLATE_ASSETS': os.path.join(MEDIA_ROOT, 'report_center/template_assets/'),
    'TEMPORARY_FILES': os.path.join(MEDIA_ROOT, 'report_center/temp/'),
}

# File size limits for Report Center uploads (in bytes)
REPORT_CENTER_LIMITS = {
    'MAX_TEMPLATE_PREVIEW_SIZE': 5 * 1024 * 1024,  # 5MB
    'MAX_GENERATED_REPORT_SIZE': 50 * 1024 * 1024,  # 50MB
    'MAX_TEMPLATE_ASSET_SIZE': 10 * 1024 * 1024,  # 10MB
}

# File type restrictions
REPORT_CENTER_ALLOWED_TYPES = {
    'TEMPLATE_PREVIEWS': ['.jpg', '.jpeg', '.png', '.gif', '.webp'],
    'TEMPLATE_ASSETS': ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.svg', '.pdf'],
    'GENERATED_REPORTS': ['.pdf', '.pptx'],
}

# Report retention settings (in days)
REPORT_CENTER_RETENTION = {
    'DRAFT_REPORTS': 90,  # Keep draft reports for 90 days
    'SHARED_REPORTS': 365,  # Keep shared reports for 1 year
    'TEMPORARY_FILES': 7,  # Clean temp files after 7 days
    'ANALYTICS_DATA': 730,  # Keep analytics for 2 years
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', 'your_stripe_publishable_key')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', 'your_stripe_secret_key')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', 'your_stripe_webhook_secret')

# Stripe Product/Price IDs
STRIPE_MONTHLY_PRICE_ID = os.environ.get('STRIPE_MONTHLY_PRICE_ID', 'price_monthly_id')
STRIPE_ANNUAL_PRICE_ID = os.environ.get('STRIPE_ANNUAL_PRICE_ID', 'price_annual_id')

# =============================================================================
# CELERY CONFIGURATION
# =============================================================================

# Celery Broker and Result Backend
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')

# Task serialization
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

# Result backend settings
CELERY_RESULT_EXPIRES = 86400  # Results expire after 24 hours
CELERY_RESULT_PERSISTENT = True  # Store results persistently

# Beat scheduler configuration
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Task execution settings
CELERY_TASK_SOFT_TIME_LIMIT = 300  # 5 minutes soft limit
CELERY_TASK_TIME_LIMIT = 600  # 10 minutes hard limit
CELERY_TASK_ACKS_LATE = True  # Acknowledge tasks after completion
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # Don't prefetch tasks

# Worker settings
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100  # Restart worker after N tasks
CELERY_WORKER_DISABLE_RATE_LIMITS = False
CELERY_TASK_COMPRESSION = 'gzip'
CELERY_RESULT_COMPRESSION = 'gzip'

# Monitoring settings
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

# Error handling
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_TASK_IGNORE_RESULT = False

# Local development fallback configuration
# This ensures the app can run locally without Redis for basic functionality
if 'CELERY_BROKER_URL' not in os.environ and DEBUG:
    # Use synchronous task execution for local development without Redis
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True
    CELERY_BROKER_URL = 'memory://'
    CELERY_RESULT_BACKEND = 'cache+memory://'

# =============================================================================
# AI INTEGRATION CONFIGURATION  
# =============================================================================

# OpenAI Configuration
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', '')
OPENAI_MODEL_VERSION = os.environ.get('OPENAI_MODEL_VERSION', 'gpt-4o-mini')

# AI Cost tracking settings
AI_MONTHLY_BUDGET_LIMIT = float(os.environ.get('AI_MONTHLY_BUDGET_LIMIT', '100.0'))  # $100 default
AI_COST_ALERT_THRESHOLD = float(os.environ.get('AI_COST_ALERT_THRESHOLD', '80.0'))  # 80% of budget

# =============================================================================
# EMAIL INTEGRATION CONFIGURATION
# =============================================================================

# Gmail OAuth2 Configuration
GOOGLE_OAUTH2_CLIENT_ID = os.environ.get('GOOGLE_OAUTH2_CLIENT_ID', '')
GOOGLE_OAUTH2_CLIENT_SECRET = os.environ.get('GOOGLE_OAUTH2_CLIENT_SECRET', '')

# Microsoft OAuth2 Configuration  
MICROSOFT_CLIENT_ID = os.environ.get('MICROSOFT_CLIENT_ID', '')
MICROSOFT_CLIENT_SECRET = os.environ.get('MICROSOFT_CLIENT_SECRET', '')

# Email sync settings
EMAIL_SYNC_BATCH_SIZE = int(os.environ.get('EMAIL_SYNC_BATCH_SIZE', '50'))
EMAIL_SYNC_RATE_LIMIT = int(os.environ.get('EMAIL_SYNC_RATE_LIMIT', '100'))  # per hour

# Django Email Configuration for Client Portal Invitations
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@retirementadvisorpro.com')

# Frontend URL for client portal invitations
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'http://localhost:3000')

# =============================================================================
# SMS/TWILIO CONFIGURATION
# =============================================================================

# Default Twilio configuration (advisors can override with their own)
TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')
TWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')

# SMS settings
SMS_RATE_LIMIT = int(os.environ.get('SMS_RATE_LIMIT', '100'))  # per hour
SMS_MAX_LENGTH = int(os.environ.get('SMS_MAX_LENGTH', '1600'))  # characters

# =============================================================================
# AWS S3 DOCUMENT STORAGE CONFIGURATION
# =============================================================================

# AWS S3 Configuration for Document Management
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-1')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', 'retirementadvisorpro-documents')

# S3 Security and Compliance Settings
AWS_S3_ENCRYPTION = os.environ.get('AWS_S3_ENCRYPTION', 'AES256')  # Server-side encryption
AWS_S3_STORAGE_CLASS = os.environ.get('AWS_S3_STORAGE_CLASS', 'STANDARD_IA')  # Cost-effective for documents
AWS_S3_VERSIONING = os.environ.get('AWS_S3_VERSIONING', 'Enabled')  # Version control for compliance

# File Upload Settings
MAX_UPLOAD_SIZE = int(os.environ.get('MAX_UPLOAD_SIZE', str(50 * 1024 * 1024)))  # 50MB default
ALLOWED_DOCUMENT_TYPES = [
    'application/pdf',
    'application/vnd.ms-excel', 
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'text/plain',
    'text/csv',
    'image/jpeg',
    'image/png',
    'image/tiff'
]

# Document Management Settings
DOCUMENT_RETENTION_DAYS = int(os.environ.get('DOCUMENT_RETENTION_DAYS', '2555'))  # 7 years default for FINRA
DOCUMENT_AUTO_CLEANUP = os.environ.get('DOCUMENT_AUTO_CLEANUP', 'False').lower() == 'true'
DOCUMENT_VIRUS_SCAN = os.environ.get('DOCUMENT_VIRUS_SCAN', 'True').lower() == 'true'

# Presigned URL Settings
PRESIGNED_URL_EXPIRATION = int(os.environ.get('PRESIGNED_URL_EXPIRATION', '3600'))  # 1 hour default

# =============================================================================
# CACHING CONFIGURATION
# =============================================================================

# Redis Cache Configuration
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.environ.get('REDIS_URL', 'redis://redis:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            # Remove PARSER_CLASS entirely - let Redis use its default
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 50,
                'retry_on_timeout': True,
            },
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
        },
        'KEY_PREFIX': 'retirementadvisorpro',
        'VERSION': 1,
        'TIMEOUT': 900,  # 15 minutes default
    }
}

# Cache key versioning for easy invalidation
CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 600
CACHE_MIDDLEWARE_KEY_PREFIX = ''

# Session cache configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 hours

# Performance monitoring cache settings
CACHE_PERFORMANCE_MONITORING = True
CACHE_SLOW_QUERY_THRESHOLD = 1.0  # seconds

# =============================================================================
# CDN AND STATIC ASSET OPTIMIZATION
# =============================================================================

# CDN Configuration
CDN_ENABLED = os.environ.get('CDN_ENABLED', 'False').lower() == 'true'
CDN_DOMAIN = os.environ.get('CDN_DOMAIN', '')
AWS_CLOUDFRONT_DISTRIBUTION_ID = os.environ.get('AWS_CLOUDFRONT_DISTRIBUTION_ID', '')

# Static file compression
COMPRESS_ENABLED = True
COMPRESS_CSS_HASHING_METHOD = 'mtime'
COMPRESS_JS_COMPRESSOR = 'compressor.js.JsCompressor'
COMPRESS_CSS_COMPRESSOR = 'compressor.css.CssCompressor'

# Static file optimization
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Asset optimization settings
OPTIMIZE_IMAGES = os.environ.get('OPTIMIZE_IMAGES', 'True').lower() == 'true'
IMAGE_OPTIMIZATION_QUALITY = int(os.environ.get('IMAGE_OPTIMIZATION_QUALITY', '85'))
WEBP_ENABLED = os.environ.get('WEBP_ENABLED', 'True').lower() == 'true'

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.tasks': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'core.services': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
