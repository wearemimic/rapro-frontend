# Generated by Django 5.2.5 on 2025-08-29 22:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0030_rename_admin_audit_admin_user_idx_admin_audit_admin_u_f6191e_idx_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('alert_type', models.CharField(choices=[('metric_threshold', 'Metric Threshold'), ('error_rate', 'Error Rate'), ('user_activity', 'User Activity'), ('revenue_change', 'Revenue Change'), ('system_health', 'System Health'), ('sla_breach', 'SLA Breach')], max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('conditions', models.JSONField(default=dict)),
                ('threshold_value', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('comparison_operator', models.CharField(default='>', max_length=10)),
                ('notification_channels', models.JSONField(default=list)),
                ('recipients', models.JSONField(default=list)),
                ('check_interval_minutes', models.IntegerField(default=5)),
                ('cooldown_minutes', models.IntegerField(default=60)),
                ('last_triggered', models.DateTimeField(blank=True, null=True)),
                ('trigger_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlertNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_message', models.TextField()),
                ('alert_data', models.JSONField(default=dict)),
                ('severity', models.CharField(default='medium', max_length=20)),
                ('notification_channel', models.CharField(max_length=50)),
                ('recipient', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('delivered', 'Delivered')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('alert_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.alertrule')),
            ],
        ),
        migrations.CreateModel(
            name='ClientPortfolioAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_clients', models.IntegerField(default=0)),
                ('total_scenarios', models.IntegerField(default=0)),
                ('total_assets_tracked', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('avg_clients_per_advisor', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('avg_scenarios_per_client', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('avg_assets_per_client', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('clients_under_50', models.IntegerField(default=0)),
                ('clients_50_to_65', models.IntegerField(default=0)),
                ('clients_over_65', models.IntegerField(default=0)),
                ('geographic_data', models.JSONField(blank=True, default=dict)),
                ('roth_conversion_usage', models.IntegerField(default=0)),
                ('social_security_planning_usage', models.IntegerField(default=0)),
                ('monte_carlo_usage', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['date'], name='core_client_date_f6f63e_idx')],
                'unique_together': {('date',)},
            },
        ),
        migrations.CreateModel(
            name='RevenueMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('metric_type', models.CharField(choices=[('mrr', 'Monthly Recurring Revenue'), ('arr', 'Annual Recurring Revenue'), ('churn_rate', 'Churn Rate'), ('ltv', 'Lifetime Value'), ('arpu', 'Average Revenue Per User'), ('new_revenue', 'New Revenue'), ('expansion_revenue', 'Expansion Revenue'), ('contraction_revenue', 'Contraction Revenue')], max_length=50)),
                ('value', models.DecimalField(decimal_places=2, max_digits=12)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('plan_type', models.CharField(blank=True, max_length=50)),
                ('cohort_month', models.DateField(blank=True, null=True)),
                ('stripe_data', models.JSONField(blank=True, default=dict)),
                ('calculation_method', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'indexes': [models.Index(fields=['date', 'metric_type'], name='core_revenu_date_196c78_idx'), models.Index(fields=['metric_type', 'plan_type'], name='core_revenu_metric__a3c518_idx')],
                'unique_together': {('date', 'metric_type', 'plan_type', 'cohort_month')},
            },
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.CharField(max_length=20, unique=True)),
                ('subject', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('billing', 'Billing Issue'), ('technical', 'Technical Problem'), ('feature_request', 'Feature Request'), ('bug_report', 'Bug Report'), ('account', 'Account Issue'), ('data', 'Data Issue'), ('integration', 'Integration Problem'), ('other', 'Other')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('waiting_user', 'Waiting for User'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('first_response_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('response_sla_hours', models.IntegerField(default=24)),
                ('resolution_sla_hours', models.IntegerField(default=72)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('internal_notes', models.TextField(blank=True)),
                ('escalated', models.BooleanField(default=False)),
                ('customer_satisfaction', models.IntegerField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SupportTicketComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_internal', models.BooleanField(default=False)),
                ('is_automated', models.BooleanField(default=False)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.supportticket')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SystemPerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metric_type', models.CharField(choices=[('response_time', 'API Response Time'), ('error_rate', 'Error Rate'), ('uptime', 'System Uptime'), ('cpu_usage', 'CPU Usage'), ('memory_usage', 'Memory Usage'), ('database_connections', 'Database Connections'), ('active_users', 'Active Users'), ('request_volume', 'Request Volume')], max_length=50)),
                ('value', models.DecimalField(decimal_places=4, max_digits=12)),
                ('unit', models.CharField(max_length=20)),
                ('endpoint', models.CharField(blank=True, max_length=200)),
                ('status_code', models.IntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'indexes': [models.Index(fields=['timestamp', 'metric_type'], name='core_system_timesta_30112e_idx'), models.Index(fields=['metric_type', 'endpoint'], name='core_system_metric__a63564_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserEngagementMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('login_count', models.IntegerField(default=0)),
                ('session_duration_minutes', models.IntegerField(default=0)),
                ('pages_viewed', models.IntegerField(default=0)),
                ('actions_performed', models.IntegerField(default=0)),
                ('scenarios_created', models.IntegerField(default=0)),
                ('scenarios_modified', models.IntegerField(default=0)),
                ('reports_generated', models.IntegerField(default=0)),
                ('clients_added', models.IntegerField(default=0)),
                ('communications_sent', models.IntegerField(default=0)),
                ('engagement_score', models.IntegerField(default=0)),
                ('is_at_risk', models.BooleanField(default=False)),
                ('risk_factors', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagement_metrics', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='alertrule',
            index=models.Index(fields=['is_active', 'alert_type'], name='core_alertr_is_acti_2c81cf_idx'),
        ),
        migrations.AddIndex(
            model_name='alertnotification',
            index=models.Index(fields=['alert_rule', 'created_at'], name='core_alertn_alert_r_7cee3a_idx'),
        ),
        migrations.AddIndex(
            model_name='alertnotification',
            index=models.Index(fields=['status', 'notification_channel'], name='core_alertn_status_818b1f_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['status', 'priority'], name='core_suppor_status_883064_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['user', 'created_at'], name='core_suppor_user_id_63299c_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['assigned_admin', 'status'], name='core_suppor_assigne_d7e55f_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['category', 'status'], name='core_suppor_categor_085993_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticketcomment',
            index=models.Index(fields=['ticket', 'created_at'], name='core_suppor_ticket__5065a9_idx'),
        ),
        migrations.AddIndex(
            model_name='userengagementmetric',
            index=models.Index(fields=['date', 'engagement_score'], name='core_useren_date_e773b8_idx'),
        ),
        migrations.AddIndex(
            model_name='userengagementmetric',
            index=models.Index(fields=['user', 'date'], name='core_useren_user_id_c9f10c_idx'),
        ),
        migrations.AddIndex(
            model_name='userengagementmetric',
            index=models.Index(fields=['is_at_risk'], name='core_useren_is_at_r_e577e5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userengagementmetric',
            unique_together={('user', 'date')},
        ),
    ]
