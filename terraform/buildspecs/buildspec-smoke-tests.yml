version: 0.2
# Smoke test buildspec for production environment validation

env:
  variables:
    NODE_VERSION: "18"
    PYTHON_VERSION: "3.12"

phases:
  install:
    runtime-versions:
      nodejs: 18
      python: 3.12
    commands:
      - echo "Installing dependencies for smoke tests..."
      - pip install --upgrade pip
      - pip install requests selenium beautifulsoup4
      
  pre_build:
    commands:
      - echo "Setting up smoke test environment..."
      - echo "API_URL=$API_URL"
      - echo "ENVIRONMENT=$ENVIRONMENT"
      - echo "Waiting for production services to be healthy after deployment..."
      - sleep 60  # Give production services time to stabilize
      
  build:
    commands:
      - echo "Running smoke tests against production environment..."
      
      # Critical endpoint smoke tests
      - echo "Testing critical production endpoints..."
      - |
        python3 << 'EOF'
        import requests
        import sys
        import time
        import json
        
        api_url = os.environ.get('API_URL', 'https://production-url.com')
        max_retries = 3
        retry_delay = 5
        
        print(f"Running smoke tests against: {api_url}")
        
        # Define critical endpoints to test
        critical_endpoints = [
            {'path': '/health/', 'expected_status': 200, 'name': 'Health Check'},
            {'path': '/', 'expected_status': 200, 'name': 'Frontend Home'},
            {'path': '/api/', 'expected_status': [200, 404], 'name': 'API Root'},
            {'path': '/login', 'expected_status': 200, 'name': 'Login Page'},
        ]
        
        failed_tests = []
        
        for endpoint in critical_endpoints:
            test_name = endpoint['name']
            path = endpoint['path']
            expected_status = endpoint['expected_status']
            
            if isinstance(expected_status, int):
                expected_status = [expected_status]
            
            print(f"\nüß™ Testing {test_name} ({path})...")
            
            success = False
            for attempt in range(max_retries):
                try:
                    response = requests.get(f"{api_url}{path}", timeout=30, allow_redirects=True)
                    
                    if response.status_code in expected_status:
                        print(f"‚úÖ {test_name}: Status {response.status_code} (Expected: {expected_status})")
                        success = True
                        break
                    else:
                        print(f"‚ùå {test_name}: Status {response.status_code} (Expected: {expected_status})")
                        
                except Exception as e:
                    print(f"‚ùå {test_name} Attempt {attempt + 1}: {str(e)}")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
            
            if not success:
                failed_tests.append(test_name)
        
        # Performance check
        print(f"\n‚ö° Testing response time...")
        try:
            start_time = time.time()
            response = requests.get(f"{api_url}/health/", timeout=10)
            response_time = time.time() - start_time
            
            if response_time < 2.0:
                print(f"‚úÖ Response Time: {response_time:.2f}s (Good)")
            elif response_time < 5.0:
                print(f"‚ö†Ô∏è Response Time: {response_time:.2f}s (Acceptable)")
            else:
                print(f"‚ùå Response Time: {response_time:.2f}s (Too slow)")
                failed_tests.append("Response Time")
                
        except Exception as e:
            print(f"‚ùå Performance test failed: {e}")
            failed_tests.append("Performance Test")
        
        # Security headers check
        print(f"\nüîí Testing security headers...")
        try:
            response = requests.get(f"{api_url}/", timeout=10)
            headers = response.headers
            
            security_headers = {
                'X-Content-Type-Options': 'nosniff',
                'X-Frame-Options': ['DENY', 'SAMEORIGIN'],
                'Strict-Transport-Security': None  # Should exist
            }
            
            for header, expected_value in security_headers.items():
                if header in headers:
                    if expected_value is None:
                        print(f"‚úÖ {header}: Present")
                    elif isinstance(expected_value, list):
                        if headers[header] in expected_value:
                            print(f"‚úÖ {header}: {headers[header]}")
                        else:
                            print(f"‚ö†Ô∏è {header}: {headers[header]} (Expected: {expected_value})")
                    elif headers[header] == expected_value:
                        print(f"‚úÖ {header}: {headers[header]}")
                    else:
                        print(f"‚ö†Ô∏è {header}: {headers[header]} (Expected: {expected_value})")
                else:
                    print(f"‚ö†Ô∏è {header}: Missing")
                    
        except Exception as e:
            print(f"‚ùå Security headers check failed: {e}")
        
        # Summary
        print(f"\nüìä Smoke Test Summary:")
        print(f"   Total Tests: {len(critical_endpoints) + 2}")  # +2 for performance and security
        print(f"   Failed Tests: {len(failed_tests)}")
        
        if failed_tests:
            print(f"   Failed: {', '.join(failed_tests)}")
            print(f"\n‚ùå SMOKE TESTS FAILED - Production deployment has issues!")
            sys.exit(1)
        else:
            print(f"   ‚úÖ ALL SMOKE TESTS PASSED - Production is healthy!")
        EOF
      
      # SSL Certificate check
      - echo "Testing SSL certificate..."
      - |
        python3 << 'EOF'
        import ssl
        import socket
        import datetime
        from urllib.parse import urlparse
        
        api_url = os.environ.get('API_URL', 'https://production-url.com')
        parsed_url = urlparse(api_url)
        hostname = parsed_url.hostname
        port = parsed_url.port or (443 if parsed_url.scheme == 'https' else 80)
        
        if parsed_url.scheme == 'https':
            try:
                context = ssl.create_default_context()
                sock = socket.create_connection((hostname, port), timeout=10)
                ssock = context.wrap_socket(sock, server_hostname=hostname)
                
                cert = ssock.getpeercert()
                
                # Check expiration
                expiry_date = datetime.datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                days_until_expiry = (expiry_date - datetime.datetime.now()).days
                
                if days_until_expiry > 30:
                    print(f"‚úÖ SSL Certificate: Valid for {days_until_expiry} more days")
                elif days_until_expiry > 7:
                    print(f"‚ö†Ô∏è SSL Certificate: Expires in {days_until_expiry} days")
                else:
                    print(f"‚ùå SSL Certificate: Expires in {days_until_expiry} days - URGENT!")
                
                ssock.close()
                sock.close()
                
            except Exception as e:
                print(f"‚ùå SSL certificate check failed: {e}")
        else:
            print("‚ÑπÔ∏è Non-HTTPS URL, skipping SSL check")
        EOF
      
      - echo "‚úÖ Smoke tests completed successfully"
      
  post_build:
    commands:
      - echo "Production smoke tests finished"
      - echo "Production deployment validated successfully"
      
artifacts:
  files:
    - 'smoke-test-results.json'
  base-directory: '.'