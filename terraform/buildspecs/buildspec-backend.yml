# CodeBuild buildspec for RetirementAdvisorPro backend
# Builds Django application, runs migrations, and updates ECS services

version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo Pre-build started on `date`

  build:
    commands:
      - echo Build started on `date`
      - echo Building Django Docker image...
      - docker build -f docker/Dockerfile.backend -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing Docker image to ECR...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      
      - echo Running database migrations...
      - |
        MIGRATE_TASK_DEF=$(aws ecs describe-task-definition --task-definition $CLUSTER_NAME-backend --query 'taskDefinition' --output json | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')
        MIGRATE_TASK_DEF=$(echo $MIGRATE_TASK_DEF | jq --arg IMAGE "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE')
        MIGRATE_TASK_DEF=$(echo $MIGRATE_TASK_DEF | jq '.containerDefinitions[0].command = ["python", "manage.py", "migrate"]')
        echo $MIGRATE_TASK_DEF > migrate-task-definition.json
        
        MIGRATE_TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://migrate-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Run migration task
        MIGRATE_TASK=$(aws ecs run-task \
          --cluster $CLUSTER_NAME \
          --task-definition $MIGRATE_TASK_ARN \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$(aws ec2 describe-subnets --filters 'Name=tag:Name,Values=*private*' --query 'Subnets[0].SubnetId' --output text)],securityGroups=[$(aws ec2 describe-security-groups --filters 'Name=tag:Name,Values=*ecs-tasks*' --query 'SecurityGroups[0].GroupId' --output text)],assignPublicIp=DISABLED}" \
          --query 'tasks[0].taskArn' --output text)
        
        # Wait for migration to complete
        echo "Waiting for migration task to complete..."
        aws ecs wait tasks-stopped --cluster $CLUSTER_NAME --tasks $MIGRATE_TASK
        
        # Check if migration was successful
        MIGRATE_EXIT_CODE=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $MIGRATE_TASK --query 'tasks[0].containers[0].exitCode' --output text)
        if [ "$MIGRATE_EXIT_CODE" != "0" ]; then
          echo "Migration failed with exit code $MIGRATE_EXIT_CODE"
          exit 1
        fi
        echo "Database migration completed successfully"
      
      - echo Updating ECS services...
      - |
        # Update backend service
        echo "Updating backend service..."
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $BACKEND_SERVICE_NAME \
          --force-new-deployment \
          --query 'service.serviceName' --output text
        
        # Update Celery worker service
        echo "Updating Celery worker service..."
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $CELERY_WORKER_SERVICE_NAME \
          --force-new-deployment \
          --query 'service.serviceName' --output text
        
        # Update Celery beat service
        echo "Updating Celery beat service..."
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $CELERY_BEAT_SERVICE_NAME \
          --force-new-deployment \
          --query 'service.serviceName' --output text
      
      - echo Waiting for services to stabilize...
      - |
        echo "Waiting for backend service to stabilize..."
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $BACKEND_SERVICE_NAME
        
        echo "Waiting for Celery worker service to stabilize..."
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $CELERY_WORKER_SERVICE_NAME
        
        echo "Waiting for Celery beat service to stabilize..."
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $CELERY_BEAT_SERVICE_NAME
      
      - echo All services updated successfully!
      
      # Create imagedefinitions.json for compatibility (though we handle deployment above)
      - printf '[{"name":"backend","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
  name: backend-build-$(date +%Y-%m-%d)