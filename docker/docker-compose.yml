version: "3.9"
services:
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "${FRONTEND_PORT:-3000}:${FRONTEND_PORT:-3000}"
    volumes:
      # - ../frontend:/app
      - ../frontend/src:/app/src
      - ../frontend/public:/app/public
      - ../frontend/package.json:/app/package.json
    working_dir: /app
    environment:
      - PORT=${FRONTEND_PORT:-3000}
    command: ["sh", "-c", "npm install sortablejs && npm run dev"]
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
  
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    ports:
      - "${BACKEND_PORT:-8000}:${BACKEND_PORT:-8000}"
    volumes:
      - ../backend:/app
      - ../frontend/public:/app/frontend/public:ro
    working_dir: /app
    depends_on:
      - db
      - redis
    env_file:
      - ../backend/.env
    environment:
      - PORT=${BACKEND_PORT:-8000}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    entrypoint: /bin/sh
    command: >
      -c "./wait-for-it.sh db:5432 --
      && python manage.py migrate
      && python manage.py seed_data
      && gunicorn retirementadvisorpro.wsgi:application --bind 0.0.0.0:${BACKEND_PORT:-8000}"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  db:
    image: postgres:14
    environment:
      POSTGRES_DB: retirementadvisorpro
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  celery_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    working_dir: /app
    volumes:
      - ../backend:/app
    depends_on:
      - db
      - redis
    env_file:
      - ../backend/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    entrypoint: /bin/sh
    command: >
      -c "./wait-for-it.sh db:5432 --
      ./wait-for-it.sh redis:6379 --
      celery -A retirementadvisorpro worker --loglevel=info --concurrency=4 --max-tasks-per-child=100"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M

  celery_beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    working_dir: /app
    volumes:
      - ../backend:/app
    depends_on:
      - db
      - redis
    env_file:
      - ../backend/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    entrypoint: /bin/sh
    command: >
      -c "./wait-for-it.sh db:5432 --
      ./wait-for-it.sh redis:6379 --
      celery -A retirementadvisorpro beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  celery_flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    working_dir: /app
    volumes:
      - ../backend:/app
    depends_on:
      - redis
      - celery_worker
    env_file:
      - ../backend/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    entrypoint: /bin/sh
    command: >
      -c "./wait-for-it.sh redis:6379 --
      celery -A retirementadvisorpro flower --port=5555 --address=0.0.0.0"
    profiles: ["monitoring"]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
  redis_data:
